/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *  user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *  (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *  user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *  (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

input,
textarea {
  box-sizing: border-box; }

label {
  box-sizing: border-box; }

/*! HiDPI v2.0.1 | MIT License | git.io/hidpi */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

h1, h2, h3, h4, h5, h6, ul, li, p, blockquote {
  margin: 0;
  padding: 0; }

li {
  list-style: none; }

input,
textarea,
button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 0;
  outline: 0;
  border: 0; }
  input:hover,
  input:active,
  input:focus,
  textarea:hover,
  textarea:active,
  textarea:focus,
  button:hover,
  button:active,
  button:focus {
    outline: 0;
    border: 0; }

embed,
iframe,
img,
object,
video {
  max-width: 100%; }

img {
  height: auto;
  width: auto; }

html {
  font-size: 100%;
  line-height: 1.3125em; }

p + p,
p + img,
img + p {
  margin-top: 1.3125rem; }

article ul,
article ol {
  margin-left: 1em; }

article li + li {
  margin-top: 0.65625rem; }

article ul li {
  list-style-type: disc; }

article ol li {
  list-style-type: decimal; }

.wrap, .wrap--header, .wrap--events-header {
  max-width: 1240px;
  max-width: 77.5rem;
  margin-left: auto;
  margin-right: auto;
  padding-left: 0.65625rem;
  padding-right: 0.65625rem; }
  .wrap:after, .wrap--header:after, .wrap--events-header:after {
    content: " ";
    display: block;
    clear: both; }
  @media all and (min-width: 40em) {
    .wrap, .wrap--header, .wrap--events-header {
      padding-left: 1.96875rem;
      padding-right: 1.96875rem; } }

.wrap--header {
  max-width: 1240px; }

.flex {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap; }

.l-dates {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
  padding-top: 1.35135%;
  padding-bottom: 1.35135%; }
  @media all and (min-width: 43.75em) {
    .l-dates {
      padding-top: 1.35135%;
      padding-bottom: 0; } }

.l-content .wrap:first-child .l-dates, .l-content .wrap--header:first-child .l-dates, .l-content .wrap--events-header:first-child .l-dates {
  padding-top: 0; }

.l-date {
  text-align: center; }
  @media all and (min-width: 43.75em) {
    .l-date {
      text-align: left;
      width: 5.40541%;
      margin-right: 1.35135%; } }

@media all and (max-width: 43.6875em) {
  .l-events {
    margin-top: -1.3125rem; } }

@media all and (min-width: 43.75em) {
  .l-events {
    width: 93.24324%;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap; } }

@media all and (max-width: 43.6875em) {
  .l-event {
    margin-top: 1.3125rem; } }

@media all and (min-width: 43.75em) {
  .l-event {
    width: 49.27536%;
    margin-right: 1.44928%;
    overflow: hidden; }
    + .l-event {
      margin-top: 0; }
    .l-event:nth-child(2n+2) {
      margin-right: 0; }
    .l-event:nth-child(n+3) {
      margin-top: 1.44928%; } }

html,
body,
.c-canvas,
.c-canvas__off-canvas,
.c-canvas__on-canvas {
  height: 100%; }

.c-canvas {
  position: relative;
  overflow: hidden; }

.c-canvas__off-canvas {
  position: fixed;
  top: 0;
  bottom: 0;
  right: -300px;
  width: 300px;
  overflow: auto;
  background: #fdd387;
  transition: right 0.4s ease-out;
  z-index: 10000; }

.c-canvas__on-canvas {
  position: relative;
  left: 0;
  z-index: 20;
  overflow: auto;
  background: white;
  transition: left 0.4s ease-out; }

.c-canvas .c-canvas__fixed-item {
  position: relative;
  left: 0;
  transition: all 0.4s ease-out; }

.c-canvas.is-open .c-canvas__off-canvas {
  right: 0; }

.c-canvas.is-open .c-canvas__on-canvas {
  overflow: hidden;
  left: -300px; }

.c-canvas.is-open .jsSmartHeadClone .c-canvas__fixed-item {
  left: -300px;
  right: 300px; }

.c-canvas-toggle {
  background: none; }
  .c-canvas-toggle span, .c-canvas-toggle .i-menu {
    vertical-align: middle; }
  .c-canvas-toggle span {
    margin-right: 0.25em;
    color: #607D8B; }
  .c-canvas-toggle .i-menu path {
    fill: #607D8B; }

.c-site-header {
  background: #288ae2;
  color: rgba(255, 255, 255, 0.85); }
  .c-site-header a,
  .c-site-header a:visited {
    color: rgba(255, 255, 255, 0.85); }

@media all and (min-width: 43.75em) {
  .wrap--header .c-canvas-toggle {
    display: none; } }

@media all and (max-width: 43.6875em) {
  .wrap--header .c-nav {
    display: none; } }

.c-nav {
  font-family: "Lato", sans-serif;
  font-size: 0.875em; }
  .c-nav a {
    padding: 0 0.5em; }

.i-menu {
  height: 1.3125rem;
  width: 1.3125rem; }

.c-canvas__on-canvas {
  background: #e3f2fc; }

.o-btn, .o-btn--highlight {
  display: inline-block;
  margin-top: 1.3125rem;
  padding: 0.75em 1.5em;
  border-radius: 6px;
  background: #607D8B;
  color: rgba(255, 255, 255, 0.7);
  font-size: 0.875rem;
  letter-spacing: 0.05em;
  font-weight: normal;
  transition: all 0.15s ease;
  text-transform: uppercase; }
  .o-btn:visited, .o-btn--highlight:visited {
    color: rgba(255, 255, 255, 0.7); }
  .o-btn:hover,
  .o-btn--highlight:hover,
  .o-btn:active,
  .o-btn--highlight:active,
  .o-btn:focus, .o-btn--highlight:focus {
    background: #37474F;
    color: white; }

.o-btn--highlight {
  background: #ed706f;
  color: rgba(255, 255, 255, 0.85); }
  .o-btn--highlight:hover,
  .o-btn--highlight:active,
  .o-btn--highlight:focus {
    background: #37474F;
    color: white; }

html {
  font-family: "Lato", sans-serif; }

body {
  text-rendering: optimizeLegibility; }

h1,
h2,
h3,
h4,
h5,
h6 {
  display: block; }

h1 {
  font-size: 2.37037em;
  line-height: 3.9375rem;
  margin-bottom: 0.65625rem; }

h2 {
  font-weight: 400; }
  @media all and (min-width: 40em) {
    h2 {
      font-size: 1.77778em;
      line-height: 42px;
      line-height: 2.625rem; } }

h3 {
  font-size: 1.33333em;
  font-weight: normal; }

h4 {
  font-weight: normal; }

em {
  font-style: italic; }

pre {
  white-space: pre; }

.o-cursive {
  font-family: "Sue Ellen Francisco", cursive; }

.o-italic {
  font-family: "Sue Ellen Francisco", cursive;
  font-style: italic;
  font-weight: bold;
  text-align: center; }

a {
  text-decoration: none;
  color: #37474F; }
  a:visited {
    color: #607D8B; }
  a:hover,
  a:active,
  a:focus {
    color: #ed706f; }

.c-logo, .c-logo--hero {
  margin: 1.3125rem 0;
  line-height: 1.1;
  text-transform: uppercase;
  text-align: center;
  font-weight: bold;
  color: rgba(255, 255, 255, 0.85);
  font-size: 0.5rem; }
  @media all and (min-width: 62.5em) {
    .c-logo, .c-logo--hero {
      font-size: 0.5rem; } }
  .c-logo .c-logo__devfest, .c-logo--hero .c-logo__devfest {
    font-size: 3em;
    letter-spacing: 0.1em;
    display: inline-block;
    vertical-align: middle; }
  .c-logo .c-logo__2015, .c-logo--hero .c-logo__2015 {
    font-size: 3em;
    letter-spacing: 0.1em;
    display: inline-block;
    vertical-align: middle; }

.c-logo--hero {
  font-size: 1rem; }
  .c-logo--hero .c-logo__devfest,
  .c-logo--hero .c-logo__2015 {
    display: block; }
  .c-logo--hero .c-logo__singapore {
    padding: 0.65625rem 0;
    font-size: 1em;
    letter-spacing: 1.1em; }

.c-hero {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  z-index: 1;
  padding-top: 5.25rem;
  padding-bottom: 5.25rem;
  background-size: cover;
  background-position: center center;
  text-align: center;
  color: rgba(255, 255, 255, 0.8); }
  .c-hero .wrap, .c-hero .wrap--header, .c-hero .wrap--events-header {
    position: relative;
    z-index: 2; }
  .c-hero:after {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    height: 100%;
    width: 100%;
    background: black;
    opacity: 0.7;
    z-index: -0; }
  .c-hero .c-logo--hero {
    color: rgba(255, 255, 255, 0.9); }

.c-hero__intro button {
  margin-top: 1.3125rem; }

.c-hero__intro button + div {
  color: rgba(255, 255, 255, 0.6); }

.c-hero__subtitle {
  margin-bottom: 0.65625rem; }

.c-hero__sponsors {
  margin-top: 2.625rem; }

.c-sponsors {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center; }
  .c-sponsors img {
    display: block;
    margin: 0 0.67568%; }

.c-date {
  position: relative; }
  .c-date:before {
    content: "";
    position: absolute;
    display: block;
    top: 0;
    bottom: 0;
    left: calc(1.96875rem - 1px);
    width: 2px;
    background: #68b6f3; }
  .c-date .c-date__cal {
    position: absolute;
    z-index: 20;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-justify-content: center;
        -ms-flex-pack: center;
            justify-content: center;
    border-radius: 100%;
    border: 2px solid #68b6f3;
    background: #e3f2fc;
    height: 3.9375rem;
    width: 3.9375rem;
    text-align: center; }
  .c-date .day {
    font-weight: bold;
    font-size: 1.33333em;
    line-height: 1; }
  .c-date .weekday {
    font-family: 'Open Sans Condensed';
    font-size: 0.75em;
    line-height: 1.2;
    text-transform: uppercase;
    letter-spacing: 0.1em; }
  .c-date .allweek {
    font-family: 'Open Sans Condensed';
    text-transform: uppercase;
    letter-spacing: 0.02em;
    font-size: 1em;
    line-height: 1.2;
    font-weight: bold; }

.wrap + .wrap .c-date:before, .wrap--header + .wrap .c-date:before, .wrap--events-header + .wrap .c-date:before, .wrap + .wrap--header .c-date:before, .wrap--header + .wrap--header .c-date:before, .wrap--events-header + .wrap--header .c-date:before, .wrap + .wrap--events-header .c-date:before, .wrap--header + .wrap--events-header .c-date:before, .wrap--events-header + .wrap--events-header .c-date:before {
  top: -1.3125rem; }

.c-event {
  background: white;
  border: 1px solid #eee; }
  @media all and (min-width: 43.75em) {
    .c-event {
      border-radius: 6px;
      box-shadow: 0 1px 0px 0px rgba(0, 0, 0, 0.1); } }

.c-event__image {
  position: relative;
  background-position: center center;
  background-size: cover;
  height: 0;
  padding-bottom: 56.25%; }
  .c-event__image:before {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    height: 0.32812rem;
    width: 100%;
    background: #68b6f3; }

.c-event__content {
  padding: 0.65625rem 1.3125rem; }
  .c-event__content:after {
    content: " ";
    display: table;
    clear: both; }

.c-event__title {
  font-family: 'Open Sans Condensed';
  font-weight: 700;
  margin-top: 0.32812rem;
  margin-bottom: 0.98438rem; }

@media all and (min-width: 62.5em) {
  .c-event__desc {
    width: 70.58824%;
    float: left;
    margin-right: 2.94118%; } }

.c-event__aside .o-btn, .c-event__aside .o-btn--highlight {
  display: block;
  text-align: center;
  margin-top: 0.65625rem; }

@media all and (min-width: 62.5em) {
  .c-event__aside {
    width: 26.47059%;
    float: right;
    margin-right: 0; }
    .c-event__aside .o-btn, .c-event__aside .o-btn--highlight {
      display: inline-block;
      margin-top: 0.32812rem; } }

.c-event__time {
  margin-top: 1.3125rem; }

.c-event__location {
  display: block;
  margin-top: 0.32812rem; }

.i-location {
  vertical-align: middle;
  display: inline-block;
  width: 1.3125rem;
  margin-right: 0.25em; }

.c-interrupt {
  text-align: center;
  display: block;
  background: #fafafa;
  margin-top: 1.3125rem;
  margin-bottom: 1.3125rem;
  padding-top: 2.625rem;
  padding-bottom: 2.625rem;
  border-top: 1px solid #ddd;
  border-bottom: 1px solid #ddd; }
  @media all and (min-width: 43.75em) {
    .c-interrupt {
      margin-top: 3.9375rem;
      margin-bottom: 3.9375rem; } }

.c-events-header {
  line-height: 1;
  background: #68b6f3;
  overflow: hidden;
  margin-bottom: 3.9375rem; }
  .c-events-header.is-fixed {
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.25); }

.c-events-wrap {
  overflow-x: scroll;
  overflow-y: hidden;
  padding-top: 1.3125rem;
  padding-bottom: 1.3125rem; }
  .c-events-wrap::-webkit-scrollbar {
    display: none; }

.c-events-nav {
  width: 760px;
  margin-left: auto;
  margin-right: auto; }
  .c-events-nav a {
    display: inline-block;
    color: rgba(96, 125, 139, 0.7);
    padding: 0 0.5em;
    font-size: 1.33333em;
    text-align: center; }
    .c-events-nav a:first-child {
      padding-left: 0; }
    .c-events-nav a:last-child {
      padding-right: 0; }
  .c-events-nav .c-events-nav__weekend {
    color: rgba(96, 125, 139, 0.7); }
  .c-events-nav .c-events-nav__day {
    display: block;
    text-transform: uppercase;
    font-size: 0.5625em; }
  .c-events-nav .c-events-nav__date {
    display: block; }
  .c-events-nav .is-active {
    color: #37474F; }

.c-tickets {
  text-align: center; }

.c-jobs:after {
  content: " ";
  display: table;
  clear: both; }

.c-job {
  margin-top: 1.3125rem; }
  @media all and (min-width: 40em) {
    .c-job {
      width: 32.20339%;
      float: left;
      margin-top: 2.625rem; }
      .c-job:nth-child(3n + 1) {
        margin-left: 0;
        margin-right: -100%;
        clear: both;
        margin-left: 0; }
      .c-job:nth-child(3n + 2) {
        margin-left: 33.89831%;
        margin-right: -100%;
        clear: none; }
      .c-job:nth-child(3n + 3) {
        margin-left: 67.79661%;
        margin-right: -100%;
        clear: none; } }

/*# sourceMappingURL=data:application/json;base64, */